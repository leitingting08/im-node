#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8086');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Create ws server.
 */
const WebSocket = require('ws');
const wss = new WebSocket.Server({
  server
});

/**
 * 监听http接口
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 监听socket接口
 */
const dayjs = require('dayjs')
const dbOp = require('../utils/dbOp')
const Message = require('../models/message');
const redisClient = require('../models/redis')
const cb = (err, data) => {
  console.log('err: ', err, ' data: ', data, ' data type: ', typeof data);
}

const onConnection = ws => {
  let results = null
  const timeNow = dayjs().format('YYYY-MM-DD HH:mm:ss')
  let onlineCount = 0
  ws.on('message', (msg) => {
    const {
      msg_type,
      user_name,
      msg_content
    } = JSON.parse(msg)
    if (msg_type !== 'PING') { // 心跳监测
      if (msg_type === 'ENTER') { // 用户进入
         ws.user_name = user_name
         onlineCount++
         redisClient.rpush("names", user_name, cb); // 向redis中添加
      }
      results = {
        msg_type,
        send_time: timeNow,
        user_name,
        msg_content
      }
      var message = new Message(results)
      dbOp.save(message)
    } else {
      ws.send(JSON.stringify(msg))
    }
    wss.clients.forEach((client) => { // 广播消息给所有客户端
      if (client.readyState === WebSocket.OPEN) {
        if (results && msg_type !== 'PING') {
          client.send(JSON.stringify({
            code: 0,
            message: '接收成功',
            results,
            onlineCount
          }))
        }
      }
    })
  })
  ws.on('close', (err,info)=>{
    // 当某一个人关闭连接离开时，将这个人从当前存储用户的数组中移除
    if(!onlineCount) return
    onlineCount--
    redisClient.lrem('names', 0, ws.user_name);
    ws.send(JSON.stringify({
      code: 0,
      message: '接收成功',
      results:{
        msg_type:'LEAVE',
        send_time: timeNow,
        user_name: ws.user_name,
        onlineCount
      }
    }))
  })
}

/** 
 * 监听websocket
 * {listening} WebSocket 服务开始监听的事件
 * {connection} WebSocket 服务被客户端连接上的事件
 * {close} 服务端收到了客户端关闭连接的事件，由客户端发起的关闭
 * {error} 监听WebSocket 通信过程中出错的事件
 **/
wss.on('connection', onConnection)