#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('server:server')
const http = require('http')
const url = require('url')
const qs = require('querystring')

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8086')
app.set('port', port)

/**
 * Create HTTP server.
 */
const server = http.createServer(app)

/**
 * new WebSocket.Server(options[, callback]) 
 * options {Object}
 *  * host {String} 要绑定的服务器主机名
 *  * port {Number} 要绑定的服务器端口
 *  * backlog {Number} 挂起连接队列的最大长度.
 *  * server {http.Server|https.Server} 一个预创建的HTTP/S服务器  
 *  * verifyClient {Function} 验证传入连接的函数。
 *  * handleProtocols {Function} 处理子协议的函数。
 *  * path {String} 只接受与此路径匹配的连接
 *  * noServer {Boolean} 启用无服务器模式
 *  * clientTracking {Boolean} 是否记录连接clients
 *  * perMessageDeflate {Boolean|Object} 开启关闭zlib压缩(配置)
 *  * maxPayload {Number} 最大消息载荷大小（bytes）
 *  * callback {Function}
 * 1. 创建一个新的服务器实例。必须提供端口、服务器或NoServer中的一个，否则会引发错误。
 * 2. 如果端口被设置，则自动创建、启动和使用HTTP服务器。
 * 3. 要使用外部HTTP/S服务器，只指定服务器或NoServer。此时，必须手动启动HTTP/S服务器。
 * 4. NoSver模式允许WS服务器与HTTP/S服务器完全分离。这使得，可以在多个WS服务器之间共享一个HTTP/S服务器
 */
const WebSocket = require('ws')
const wss = new WebSocket.Server({
  server
})

/**
 * 监听http接口
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * 监听socket接口
 */
const Message = require('../models/message')
const redisClient = require('../models/redis')
const cb = (err, data) => {
  // console.log('err: ', err, ' data: ', data, ' data type: ', typeof data)  
}

/**
 * @see https://github.com/websockets/ws
 * server.handleUpgrade(request, socket, head, callback) 处理websocket升级请求 noServer模式下必须手动调用该函数
 **/
// server.on('upgrade', function upgrade(request, socket, head) {
//   wss.handleUpgrade(request, socket, head, function done(ws) {
//     wss.emit('connection', ws, request)
//   })
// })

let onlineCount = 0
let results = null

const boardCast = (results) => {
  wss.clients.forEach((client) => { // 广播消息给所有客户端 断联了 主动发消息给客户端
    if (client.readyState === WebSocket.OPEN) {
      if (results && results.msg_type !== 'PING') {
        client.send(
          JSON.stringify({
            code: 0,
            message: '成功',
            results,
            onlineCount,
          })
        )
      }
    }
  })
  var message = new Message(results) // 历史消息存数据库
  message.save((err, res) => {
    if (err) {
      console.log("保存失败：" + err)
      results = null
    } else {
      console.log("保存成功：" + res)
      results = res
    }
  })
}

// 要判断下客户端是否断联-how? ---- 接收不到心跳包 判断用户是否离开
const onConnection = (ws, request) => {
  const query = qs.parse(url.parse(request.url).query)
  // const room = query.room
  const user = query.user
  const userEnter = (type) => {
    if (type === 'enter') {
      redisClient.sadd('users', user)
      redisClient.scard('users', (err, data) => {
        if (!err) {
          onlineCount = data
        }
      })
    }
    if (type === 'leave') {
      redisClient.srem('users', user)
      redisClient.scard('users', (err, data) => {
        if (!err) {
          onlineCount = data
        }
      })
    }
  }
 
  userEnter('enter')

  redisClient.hset('myhash', user, new Date().valueOf(), cb)
  ws.on('message', (msg) => {
    redisClient.hset('myhash', user, new Date().valueOf(), cb)
    redisClient.hkeys('myhash', (err, replies) => {
      console.log(replies)
      replies.forEach(item => {
        redisClient.hget('myhash', item, (err, data) => {
          const time = new Date().valueOf() - Number(data)
          if (time > 5000) {
            results = {
              msg_type: 'LEAVE',
              send_time: (new Date()).valueOf(),
              user_name: item
            }
            boardCast(results)
            redisClient.hdel('myhash', item, cb)
          }
        })
      })
    })
    userEnter('enter')
    const {
      msg_type,
      user_name,
      msg_content,
      msg_id
    } = JSON.parse(msg)
    // 要区分下是正常刷新重连还是 用户关闭浏览器（主动断连）或 网络不好断开连接
    if (msg_type !== 'PING') {
      // 心跳监测
      results = {
        msg_type,
        send_time: (new Date()).valueOf(),
        user_name,
        msg_content,
        msg_id
      }
      boardCast(results)
    } else {
      ws.send(
        JSON.stringify({
          // 心跳包返回PING
          code: 0,
          message: '接收成功',
          results: {
            msg_type: 'PING',
          },
          onlineCount,
        })
      )
    }
  })
  ws.on('close', (err, info) => { // 当页面刷新重连也会触发close 给客户端发一个消息
    // 当socket连接断开，将这个人从当前存储用户的数组中移除
    if (!onlineCount) return
    if (!user) return
    userEnter('leave')
  })
}

/**
 * 监听websocket
 * {listening} WebSocket 服务开始监听的事件
 * {connection} WebSocket 服务被客户端连接上的事件
 * {close} 服务端收到了客户端关闭连接的事件，由客户端发起的关闭
 * {error} 监听WebSocket 通信过程中出错的事件
 **/
wss.on('connection', onConnection)